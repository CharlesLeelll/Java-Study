JVM类加载机制 {
				        ___________________________________________________	
		加载	___|\  |   验证		 ___|\	   准备		___|\	  解析	   | ___|\	   初始化		___|\	使用	___|\	  卸载
	   Loading     |/  | Verification   |/	Preparation	   |/	Resolution |    |/	Initialization	   |/	Using	   |/	Unloading
					   |___________________________________________________|			
												_||_
												\  /
												 \/
												连接
											  Linking
	{
		加载 -- 类加载过程的一个阶段,从内存中生成一个代表这个类的java.lang.Class对象,作为方法区这个类的各种数据的入口
		验证 -- 确保Class文件的字节流中包含的信息是否符合虚拟机要求
		准备 -- 正式为类变量分配内存并设置类变量的初始值阶段
		解析 -- 虚拟机将常量池中的符号饮用 替换为 直接引用
		初始化 -- 执行类构造器<client> 方法(由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成) {
			不执行类初始化的情况 {
				子类引用父类的静态字段 -- 触发父类初始化,不触发子类
				定义对象数组
				常量 -- 在编译期间会存入调用类的常量池中,本质上并没有直接引用定义常量的类
				通过类名获取Class对象
				通过Class.forName()加载指定类时,若指定参数initialize为false时 -- 是否进行初始化
				通过ClassLoader默认的loadClass方法
			}
		}

		类加载器 {
			启动类加载器(Bootstrap ClassLoader)  -- 加载 J_H\lib & 通过Xbootclasspath指定的, 且被虚拟机认可的 类
			扩展类加载器(Extension ClassLoader)  -- 加载 J_H\lib\ext & 通过java.ext.dirs指定的 类库
			应用程序类加载器(Application ClassLoader) -- 加载 用户路径(classpath)的 类库
			
			JVM通过双亲委派模型进行类的加载,也可以通过继承java.lang.ClassLoader实现自定义的类加载器
							
								Bootstrap ClassLoader
										↑
								Extension ClassLoader
										↑
								Application ClassLoader
									↑				↑
			User ClassLoader(自定义加载器)		User ClassLoader(自定义加载器)
			
			类加载器  收到加载任务  首先→父类  因此最终传到顶层BC  父类×  尝试加载
			
			双亲委派 -- 优点  保证使用不同的类加载器 最终得到同一个对象
		}
	}
	
	
}