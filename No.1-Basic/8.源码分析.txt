底层实现 {

	String {
		final修饰的类
		实现了 Serializable, Comparable[compareTo(String s)], CharSequence[length(), charAt(int index), subSequence(int start, int end)] 接口
		
		包含一个不可变的char数组, 用于存放字符串. 一个int型的变量 hash, 用来存放计算后的哈希值
		
		构造函数 {
		
			//不含参数的构造函数，一般没什么用，因为value是不可变量
			public String() {
				this.value = new char[0];
			}

			//参数为String类型
			public String(String original) {
				this.value = original.value;
				this.hash = original.hash;
			}

			//参数为char数组，使用java.utils包中的Arrays类复制
			public String(char value[]) {
				this.value = Arrays.copyOf(value, value.length);
			}

			//从bytes数组中的offset位置开始，将长度为length的字节，以charsetName格式编码，拷贝到value
			public String(byte bytes[], int offset, int length, String charsetName)
					throws UnsupportedEncodingException {
				if (charsetName == null)
					throw new NullPointerException("charsetName");
				checkBounds(bytes, offset, length);
				this.value = StringCoding.decode(charsetName, bytes, offset, length);
			}

			//调用public String(byte bytes[], int offset, int length, String charsetName)构造函数
			public String(byte bytes[], String charsetName)
					throws UnsupportedEncodingException {
				this(bytes, 0, bytes.length, charsetName);
			}
		
		}
		
		常用方法 {
			// 相等
			boolean equals(Object anObject) {
			
				public boolean equals(Object anObject) {
					//如果引用的是同一个对象，返回真
					if (this == anObject) {
						return true;
					}
					//如果不是String类型的数据，返回假
					if (anObject instanceof String) {
						String anotherString = (String) anObject;
						int n = value.length;
						//如果char数组长度不相等，返回假
						if (n == anotherString.value.length) {
							char v1[] = value;
							char v2[] = anotherString.value;
							int i = 0;
							//从后往前单个字符判断，如果有不相等，返回假
							while (n-- != 0) {
								if (v1[i] != v2[i])
										return false;
								i++;
							}
							//每个字符都相等，返回真
							return true;
						}
					}
					return false;
				}
			}
			// 比较
			int compareTo(String anotherString) {
				
				public int compareTo(String anotherString) {
					//自身对象字符串长度len1
					int len1 = value.length;
					//被比较对象字符串长度len2
					int len2 = anotherString.value.length;
					//取两个字符串长度的最小值lim
					int lim = Math.min(len1, len2);
					char v1[] = value;
					char v2[] = anotherString.value;

					int k = 0;
					//从value的第一个字符开始到最小长度lim处为止，如果字符不相等，返回自身（对象不相等处字符-被比较对象不相等字符）
					while (k < lim) {
						char c1 = v1[k];
						char c2 = v2[k];
						if (c1 != c2) {
							return c1 - c2;
						}
						k++;
					}
					//如果前面都相等，则返回（自身长度-被比较对象长度）
					return len1 - len2;
				}
			}
			// 哈希Code
			int hashCode() {

				public int hashCode() {
					int h = hash;
					//如果hash没有被计算过，并且字符串不为空，则进行hashCode计算
					if (h == 0 && value.length > 0) {
						char val[] = value;

						//计算过程
						//s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
						for (int i = 0; i < value.length; i++) {
							h = 31 * h + val[i];
						}
						//hash赋值
						hash = h;
					}
					return h;
				}
			}
			// 起始为?
			boolean startsWith(String prefix,int toffset) {

				public boolean startsWith(String prefix, int toffset) {
					char ta[] = value;
					int to = toffset;
					char pa[] = prefix.value;
					int po = 0;
					int pc = prefix.value.length;
					// Note: toffset might be near -1>>>1.
					//如果起始地址小于0或者（起始地址+所比较对象长度）大于自身对象长度，返回假
					if ((toffset < 0) || (toffset > value.length - pc)) {
						return false;
					}
					//从所比较对象的末尾开始比较
					while (--pc >= 0) {
						if (ta[to++] != pa[po++]) {
							return false;
						}
					}
					return true;
				}

				public boolean startsWith(String prefix) {
					return startsWith(prefix, 0);
				}

				public boolean endsWith(String suffix) {
					return startsWith(suffix, value.length - suffix.value.length);
				}
			}
			// 连接String
			String concat(String str) {

				public String concat(String str) {
					int otherLen = str.length();
					//如果被添加的字符串为空，返回对象本身
					if (otherLen == 0) {
						return this;
					}
					int len = value.length;
					char buf[] = Arrays.copyOf(value, len + otherLen);
					str.getChars(buf, len);
					return new String(buf, true);
				}
			}
			// 替换
			String replace(char oldChar,char newChar) {

				public String replace(char oldChar, char newChar) {
					//新旧值先对比
					if (oldChar != newChar) {
						int len = value.length;
						int i = -1;
						char[] val = value; /* avoid getfield opcode */

						//找到旧值最开始出现的位置
						while (++i < len) {
							if (val[i] == oldChar) {
								break;
							}
						}
						//从那个位置开始，直到末尾，用新值代替出现的旧值
						if (i < len) {
							char buf[] = new char[len];
							for (int j = 0; j < i; j++) {
								buf[j] = val[j];
							}
							while (i < len) {
								char c = val[i];
								buf[i] = (c == oldChar) ? newChar : c;
								i++;
							}
							return new String(buf, true);
						}
					}
					return this;
				}
			}
			// 去除空格
			String trim() {

				public String trim() {
					int len = value.length;
					int st = 0;
					char[] val = value;    /* avoid getfield opcode */

					//找到字符串前段没有空格的位置
					while ((st < len) && (val[st] <= ' ')) {
						st++;
					}
					//找到字符串末尾没有空格的位置
					while ((st < len) && (val[len - 1] <= ' ')) {
						len--;
					}
					//如果前后都没有出现空格，返回字符串本身
					return ((st > 0) || (len < value.length)) ? substring(st, len) : this;
				}
			}
		}
	
	}

}